import json     # para salvar usu√°rios
import pwinput  # para esconder senha com '*' 

# Dados dos m√©dicos com hor√°rios dispon√≠veis
medicos = [
    {
        "nome": "Dr. Marcos Vieira",
        "especialidade": "Pneumologia",
        "horarios_disponiveis": ["12/09/2025 15:00", "12/09/2025 16:00", "15/09/2025 14:00"]
    },
    {
        "nome": "Dra. Patr√≠cia Mendes",
        "especialidade": "Dermatologia",
        "horarios_disponiveis": ["25/09/2025 19:00", "25/09/2025 15:00"]
    },
    {
        "nome": "Dr. Andr√© Moreira",
        "especialidade": "Neurologia",
        "horarios_disponiveis": ["14/09/2025 10:00", "14/09/2025 16:00"]
    },
    {
        "nome": "Dra. Luciana Castro",
        "especialidade": "Gastroenterologia",
        "horarios_disponiveis": ["18/09/2025 11:00", "18/09/2025 17:30"] # Corrigi a lista de strings
    },
    {
        "nome": "Dr. Ricardo Alves",
        "especialidade": "Nefrologia",
        "horarios_disponiveis": ["02/10/2025 14:00", "02/10/2025 11:00"] # Corrigi a lista de strings
    },
    {
        "nome": "Dra. Renata Fonseca",
        "especialidade": "Cardiologia",
        "horarios_disponiveis": ["04/09/2025 14:00"]
    },
]

print("Bem-vindo ao Nome do local\n"
      "Integre, acompanhe e registre cada etapa com seguran√ßa.\n"
      "‚û°Ô∏è  Acesse o painel e comece agora.\n")

usuario_encontrado = None  # vari√°vel global para armazenar o usu√°rio logado

# Menu inicial: login ou cadastro
while True:
    print("Acesso ao login: Digite 1")
    print("Criar uma conta: Digite 2")
    opcao_inicial = input("Escolha uma op√ß√£o (1 para login, 2 para criar conta): ").strip()

    if opcao_inicial in ["1", "2"]:
        break
    else:
        print("‚ùå Op√ß√£o inv√°lida! Tente novamente.\n")

#Cadastro
def formatar_cpf(cpf: str) -> str:
    """Formata o CPF no padr√£o 000.000.000-00"""
    return f"{cpf[:3]}.{cpf[3:6]}.{cpf[6:9]}-{cpf[9:]}"

def cadastro():
    nome = input("Nome completo: ").strip()
    while True:
        cpf = input("CPF (11 d√≠gitos): ").strip()
        if cpf.isdigit() and len(cpf) == 11:
            identificador = formatar_cpf(cpf)
            tipo_usuario = "paciente"
            break
        else:
            print("‚ùå CPF inv√°lido! Digite apenas 11 n√∫meros.")

    while True:
        senha = pwinput.pwinput("Crie uma senha: ", mask="*").strip()
        confirma = pwinput.pwinput("Confirme a senha: ", mask="*").strip()
        if senha == confirma:
            print("‚úÖ Senha criada com sucesso!")
            break
        else:
            print("‚ùå As senhas n√£o conferem. Tente novamente!")

    # Inicia com campos de perfil vazios e agenda vazia
    usuario = {
        "nome": nome,
        "id": identificador,
        "senha": senha,
        "tipo": tipo_usuario,
        "perfil": {},
        "agenda": []
    }

    # Salva o usu√°rio no arquivo
    with open("usuarios.json", "a") as f:
        f.write(json.dumps(usuario) + "\n")

    print(f"\n‚úÖ Conta criada com sucesso! Bem-vindo(a), {nome}.\n")
    return usuario

#Login
def login():
    while True:
        identificador = input("Digite seu CPF ou CRM: ").strip()
        senha = pwinput.pwinput("Senha: ", mask ="*").strip()

        try:
            with open("usuarios.json", "r") as f:
                for linha in f:
                    usuario = json.loads(linha)
                    if usuario["id"] == identificador and usuario["senha"] == senha:
                        print(f"\n‚úÖ Login realizado com sucesso! Bem-vindo(a), {usuario['nome']}.\n")
                        return usuario
        except FileNotFoundError:
            print("‚ùå Nenhum usu√°rio cadastrado ainda. Vamos criar uma conta!\n")
            return cadastro()
        print("‚ùå Usu√°rio ou senha incorretos. Tente novamente!\n")

#Fun√ß√µes de agenda
def mostrar_agenda(usuario):
    if not usuario.get("agenda"): 
        print("üìÖ Nenhum compromisso agendado.")
        return

    consultas = [c for c in usuario["agenda"] if c["tipo_compromisso"].lower() == "consulta"]
    exames = [c for c in usuario["agenda"] if c["tipo_compromisso"].lower() == "exame"]

    print("\nüìå Consultas")
    if consultas:
        for c in consultas:
            hora = c.get("hora", "") 
            print(f"   {c['data']} {hora} ‚Äì {c['especialidade']} ‚Äì Status: {c['status']}")
    else:
        print("   Nenhuma consulta agendada.")

    print("\nüìå Exames")
    if exames:
        for c in exames:
            hora = c.get("hora", "") 
            print(f"   {c['data']} {hora} ‚Äì {c['especialidade']} ‚Äì Status: {c['status']}")
    else:
        print("   Nenhum exame agendado.")

def adicionar_compromisso_paciente(usuario):
    print("\n Adicionar Novo Compromisso ")
    while True:
        tipo = input("Tipo de compromisso (Consulta / Exame): ").strip().title()
        if tipo in ["Consulta", "Exame"]:
            break
        else:
            print("‚ùå Tipo inv√°lido. Escolha 'Consulta' ou 'Exame'.")

    especialidade_exame = input(f"Procurar por especialidade para {tipo} ou nome do exame: ").strip().title()

    if tipo == "Consulta":
        medicos_encontrados = [m for m in medicos if m["especialidade"].lower() == especialidade_exame.lower()]

        if medicos_encontrados:
            print(f"\nM√©dicos encontrados para {especialidade_exame}:")
            for idx, m in enumerate(medicos_encontrados, 1):
                print(f"{idx} - {m['nome']} ({m['especialidade']})")
            
            while True:
                escolha_medico_idx = input("Escolha o n√∫mero do m√©dico: ").strip()
                if escolha_medico_idx.isdigit() and 1 <= int(escolha_medico_idx) <= len(medicos_encontrados):
                    medico_escolhido = medicos_encontrados[int(escolha_medico_idx) - 1]
                    break
                else:
                    print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")

            if not medico_escolhido["horarios_disponiveis"]:
                print("‚ö†Ô∏è Nenhum hor√°rio dispon√≠vel para este m√©dico.")
                return
            
            print("\nHor√°rios dispon√≠veis:")
            for idx, h in enumerate(medico_escolhido["horarios_disponiveis"], 1):
                print(f"{idx} - {h}")

            while True:
                escolha_horario = input("Escolha o n√∫mero do hor√°rio desejado: ").strip()
                if escolha_horario.isdigit() and 1 <= int(escolha_horario) <= len(medico_escolhido["horarios_disponiveis"]):
                    horario_escolhido = medico_escolhido["horarios_disponiveis"].pop(int(escolha_horario)-1)
                    break
                else:
                    print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")

            # Garante que 'agenda' √© uma lista
            if "agenda" not in usuario:
                usuario["agenda"] = []

            usuario["agenda"].append({
                "tipo_compromisso": tipo,
                "data": horario_escolhido.split()[0],
                "hora": horario_escolhido.split()[1],
                "especialidade": medico_escolhido["especialidade"],
                "medico": medico_escolhido["nome"],
                "status": "Confirmada"
            })

            print(f"‚úÖ Consulta agendada com sucesso com {medico_escolhido['nome']} em {horario_escolhido}!")
            # Atualiza o arquivo de usu√°rios ap√≥s adicionar o compromisso
            atualizar_usuario_no_arquivo(usuario)
        else:
            print("‚ö†Ô∏è Nenhum m√©dico encontrado com essa especialidade.")

    elif tipo == "Exame":
        data_exame = input("Data do exame (DD/MM/YYYY): ").strip()
        status_exame = input("Status do exame (Agendado / Resultado em an√°lise): ").strip().title()

        if "agenda" not in usuario:
            usuario["agenda"] = []

        usuario["agenda"].append({
            "tipo_compromisso": tipo,
            "data": data_exame,
            "hora": "", # Exames geralmente n√£o t√™m hora espec√≠fica no agendamento inicial
            "especialidade": especialidade_exame, # Aqui 'especialidade_exame' √© o nome do exame
            "status": status_exame
        })
        print(f"‚úÖ Exame de {especialidade_exame} adicionado com sucesso para {data_exame}!")
        # Atualiza o arquivo de usu√°rios ap√≥s adicionar o compromisso
        atualizar_usuario_no_arquivo(usuario)
.....
def atualizar_usuario_no_arquivo(usuario_a_atualizar):
    """Sobrescreve o arquivo 'usuarios.json' com as informa√ß√µes atualizadas de todos os usu√°rios."""
    usuarios_existentes = []
    try:
        with open("usuarios.json", "r") as f:
            for linha in f:
                usuarios_existentes.append(json.loads(linha))
    except FileNotFoundError:
        pass # Se o arquivo n√£o existe, a lista permanece vazia

    # Encontra e atualiza o usu√°rio na lista
    for i, u in enumerate(usuarios_existentes):
        if u["id"] == usuario_a_atualizar["id"]:
            usuarios_existentes[i] = usuario_a_atualizar
            break
    else: # Se o usu√°rio n√£o foi encontrado (caso de um novo cadastro sem ter lido antes)
        usuarios_existentes.append(usuario_a_atualizar)

    # Reescreve o arquivo com a lista atualizada de usu√°rios
    with open("usuarios.json", "w") as f:
        for u in usuarios_existentes:
            f.write(json.dumps(u) + "\n")

# --- Fun√ß√µes de Perfil (adaptadas) ---
def configurar_perfil_paciente(usuario):
    print("\n--- Configurar Perfil Pessoal ---")
    # Usa os dados existentes do usu√°rio como padr√£o
    perfil = usuario.get("perfil", {}) # Pega o perfil existente ou um dicion√°rio vazio
    
    print(f"Nome completo: {usuario['nome']}") # Nome j√° vem do cadastro
    print(f"CPF: {usuario['id']}") # CPF j√° vem do cadastro

    idade = input(f"Idade ({perfil.get('idade', 'N√£o informado')}): ").strip()
    perfil['idade'] = int(idade) if idade.isdigit() else perfil.get('idade', None)

    genero = input(f"G√™nero ({perfil.get('genero', 'N√£o informado')}): ").strip().title()
    perfil['genero'] = genero if genero else perfil.get('genero', None)

    endereco = input(f"Endere√ßo ({perfil.get('endereco', 'N√£o informado')}): ").strip().title()
    perfil['endereco'] = endereco if endereco else perfil.get('endereco', None)

    while True:
        contato = input(f"Telefone para contato (11 d√≠gitos, ex: 11987654321) ({perfil.get('contato_raw', 'N√£o informado')}): ").strip()
        if contato.isdigit() and len(contato) == 11:
            perfil['contato_raw'] = contato # Salva o n√∫mero puro
            perfil['contato_formatado'] = f"({contato[:2]}) {contato[2:7]}-{contato[7:]}"
            print("üìû Telefone salvo:", perfil['contato_formatado'])
            break
        elif not contato: # Permite pular se o usu√°rio n√£o quiser alterar
            print("Telefone n√£o alterado.")
            break
        else:
            print("‚ùå Telefone inv√°lido! Digite apenas n√∫meros e use 11 d√≠gitos.")
    
    medicamentos_str = perfil.get('medicamentos', 'Nenhum')
    usa_medicamentos = input(f"Faz uso de medicamentos cont√≠nuos? (sim/n√£o) ({'sim' if medicamentos_str != 'Nenhum' else 'n√£o'}): ").strip().lower()
    if usa_medicamentos == "sim":
        medicamentos = input(f"Quais medicamentos voc√™ utiliza? ({medicamentos_str}): ").strip()
        perfil['medicamentos'] = medicamentos if medicamentos else medicamentos_str
    else:
        perfil['medicamentos'] = "Nenhum"

    preferencia_de_contato_str = perfil.get('preferencia_de_contato', 'N√£o informado')
    preferencia_de_contato = input(f"Por onde devemos entrar em contato (e-mail, telefone ou app) ({preferencia_de_contato_str}): ").strip().lower()
    
    if preferencia_de_contato in ["e-mail", "email"]:
        while True:
            email_contato = input(f"Digite seu e-mail para contato ({perfil.get('email_contato', 'N√£o informado')}): ").strip()
            if "@" in email_contato and "." in email_contato: # Valida√ß√£o b√°sica de e-mail
                perfil['email_contato'] = email_contato
                perfil['meio_contato_detalhado'] = f"E-mail: {email_contato}"
                perfil['preferencia_de_contato'] = "E-mail"
                print("üì© Prefer√™ncia de contato registrada:", perfil['meio_contato_detalhado'])
                break
            elif not email_contato: # Permite pular
                print("E-mail n√£o alterado.")
                break
            else:
                print("‚ùå E-mail inv√°lido! Certifique-se de incluir '@' e '.'.")
    elif preferencia_de_contato == "telefone":
        if perfil.get('contato_formatado'):
            perfil['meio_contato_detalhado'] = f"Telefone: {perfil['contato_formatado']}"
            perfil['preferencia_de_contato'] = "Telefone"
            print("üì© Prefer√™ncia de contato registrada:", perfil['meio_contato_detalhado'])
        else:
            print("‚ö†Ô∏è Telefone n√£o informado no perfil. Por favor, preencha o telefone primeiro.")
    elif preferencia_de_contato == "app":
        perfil['meio_contato_detalhado'] = "App (notifica√ß√µes internas)"
        perfil['preferencia_de_contato'] = "App"
        print("üì© Prefer√™ncia de contato registrada:", perfil['meio_contato_detalhado'])
    elif not preferencia_de_contato: # Permite pular
        print("Prefer√™ncia de contato n√£o alterada.")
    else:
        perfil['meio_contato_detalhado'] = "N√£o informado"
        perfil['preferencia_de_contato'] = "N√£o informado"
        print("Prefer√™ncia de contato inv√°lida ou n√£o informada.")

    while True:
        print("\nüîí Termos de privacidade: Seus dados ser√£o usados apenas para fins cl√≠nicos, conforme a LGPD.\n")
        aceitou_termos = input("Voc√™ aceita os termos de privacidade (sim/n√£o): ").strip().lower()
        if aceitou_termos == "sim":
            perfil['aceitou_termos'] = True
            print("‚úÖ Termos aceitos! Vamos continuar...")
            break
        else:
            print("‚ö†Ô∏è Voc√™ deve aceitar os termos para continuar.\n")
            perfil['aceitou_termos'] = False # Mant√©m como False se n√£o aceitar

    usuario["perfil"] = perfil # Atualiza o perfil no objeto usu√°rio
    atualizar_usuario_no_arquivo(usuario) # Salva as altera√ß√µes no arquivo

    print("\n--- Dados do Perfil ---")
    print(f"Nome: {usuario['nome']}")
    print(f"CPF: {usuario['id']}")
    for key, value in perfil.items():
        if key not in ['contato_raw', 'aceitou_termos']: # N√£o exibe esses campos brutos
            print(f"{key.replace('_', ' ').title()}: {value if value is not None else 'N√£o informado'}")
    print("\n‚úÖ Perfil finalizado e salvo com sucesso! Voltando ao MENU PACIENTE...")


# --- Fluxo principal de login/cadastro ---
if opcao_inicial == "2":
    usuario_encontrado = cadastro()
elif opcao_inicial == "1":
    usuario_encontrado = login()
    # Se o login falhar e o usu√°rio decidir cadastrar, `login()` j√° cuida disso.
    # Se o login falhar e o usu√°rio n√£o cadastrar (e retornar None), isso ser√° tratado no loop do menu principal.

# --- Menu do paciente ---
if usuario_encontrado and usuario_encontrado["tipo"] == "paciente":
    while True:
        print("\n--- MENU PACIENTE ---")
        print("1 - Perfil pessoal")
        print("2 - Agenda")
        print("3 - Resultados e documentos ")
        print("4 - Comunica√ß√£o segura ")
        print("5 - M√≥dulos educacionais")
        print("6 - Notifica√ß√µes")
        print("7 - Privacidade")
        print("0 - Sair")

        escolha_menu_principal = input("\nEscolha uma op√ß√£o: ").strip()

        if escolha_menu_principal == "1":
            configurar_perfil_paciente(usuario_encontrado)
        elif escolha_menu_principal == "2":
            while True:
                print("\n--- AGENDA DO PACIENTE ---")
                print("1 - Ver agenda")
                print("2 - Adicionar compromisso")
                print("0 - Voltar ao menu principal")

                opcao_agenda = input("Escolha uma op√ß√£o: ").strip()
                if opcao_agenda == "1":
                    mostrar_agenda(usuario_encontrado)
                elif opcao_agenda == "2":
                    adicionar_compromisso_paciente(usuario_encontrado)
                elif opcao_agenda == "0":
                    break
                else:
                    print("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
        elif escolha_menu_principal == "0":
            print("Saindo do sistema. At√© logo!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida! Por favor, escolha uma op√ß√£o v√°lida do menu.")